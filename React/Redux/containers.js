/* Table of differences between presentation and container components

                              Presentational                Container

Purpose                       How things look 	            How things work(data fetching, state updates)
Aware of Redux                No                            Yes
To Read Data                  Read data from props          Subscribe to Redux state
To Change Data                Invoke callbacks from props	  Dispatch Redux actions
                              Are Written	By hand           Generated by react-redux connect()

*/


// Container Component

// components/list/list_container.jsx
import { connect } from 'react-redux';
import { resetItems } from '../../actions/items' // action creator
import List from '../list'; // presentational component to connect

const mapStateToProps = (state) => ({ // map slice of state to props object
  items: state.items
});

const mapDispatchToProps = (dispatch) => ({ // create action dispatcher
  resetItems: () => dispatch(resetItems())
});

const ListContainer = connect(
  mapStateToProps,
  mapDispatchToProps
)(List);

export default ListContainer;


// Presentational Components

// components/list/list.jsx
import React from 'react';
import Item from 'components/list/item';

const List = ({ items, resetItems }) => {
  const listItems = items.map((item, idx) => (
    <Item key={idx} item={item} />
  ));

  return (
    <div className="list">
      <h1 onClick={resetItems}>
        Click to Reset
			</h1>
      <ul className='list-items'>
        {listItems}
      </ul>
    </div>
  );
};

export default List;

// components/list/item.jsx
import React from "react";

const Item = ({ item }) => (
  <div className="list-item">
    <h3>{item.name}</h3>
    <span>{item.body}</span>
  </div>
);

export default Item;
